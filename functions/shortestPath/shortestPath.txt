// Для чтения входных данных в Node.js необходимо использовать
// модуль readline, который работает с потоком ввода-вывода
// (stdin/stdout) и позволяет читать строки.
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Данные во входном потоке могут состоять из нескольких строк.
// Чтобы прочитать их, можно использовать метод rl.on(),
// который вызывается каждый раз при появлении новой строки
// в потоке ввода.
// Чтобы вывести результат в поток вывода (stdout),
// можно использовать метод console.log().
// Пример:
// console.log('Результат:', result);

// Пример решения задачи "Вычислите сумму A+B":
// rl.on('line', line => {
// const [a, b] = line.split(' ').map(Number);
//  console.log(a + b);
//  rl.close();
// });

https://coderun.yandex.ru/problem/shortest-path-length?currentPage=1&difficulty=EASY&groups=algorithm&groups=frontend&pageSize=20&search=&tag=bfs&compiler=nodejs_20

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

let inputLines = [];
let numVertices = 0;
let start = 0;
let end = 0;

rl.on('line', (line) => {
  inputLines.push(line.trim());
});

rl.on('close', () => {
  // Преобразуем первую строку входных данных в число вершин
  numVertices = parseInt(inputLines[0], 10);

  // Преобразуем строки с матрицей смежности в массив чисел
  const adjacencyMatrix = inputLines.slice(1, numVertices + 1).map(line => line.split(' ').map(Number));
  
  // Преобразуем последнюю строку для получения начальной и конечной вершин
  [start, end] = inputLines[numVertices + 1].split(' ').map(Number);

  // Вызываем функцию для нахождения кратчайшего пути и выводим результат
  console.log(shortestPathLength(numVertices, adjacencyMatrix, start, end));
});

function shortestPathLength(numVertices, adjacencyMatrix, start, end) {
    start -= 1; // Преобразование в 0-индексацию
    end -= 1;   // Преобразование в 0-индексацию
    
    const queue = [start];
    const visited = Array(numVertices).fill(false);
    const distance = Array(numVertices).fill(Infinity);
    
    visited[start] = true;
    distance[start] = 0;

    while (queue.length > 0) {
        const current = queue.shift();

        for (let neighbor = 0; neighbor < numVertices; neighbor++) {
            if (adjacencyMatrix[current][neighbor] === 1 && !visited[neighbor]) {
                visited[neighbor] = true;
                distance[neighbor] = distance[current] + 1;
                queue.push(neighbor);

                if (neighbor === end) {
                    return distance[end];
                }
            }
        }
    }

    return -1; // Путь не найден
>>>>>>> f7656abf33b988fdf48286423f29b88960fb5eef
